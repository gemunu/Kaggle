x_train, x_test, y_train, y_test = train_test_split(train,y,test_size=0.33,random_state=42)

xdtest=xgb.DMatrix(x_test,y_test)
xdtrain=xgb.DMatrix(x_train,label=y_train)

params = {}
params["objective"] = "reg:linear"
params["eta"] = 0.3
params["min_child_weight"] = 240
params["subsample"] = 1
params["colsample_bytree"] = 0.67
params["silent"] = 0
params["max_depth"] = 4
params["eta"]=0.45
plst=list(params.items())


def eval_wrapper(yhat, y):
        y = np.array(y)
        y = y.astype(int)
        yhat = np.array(yhat)
        yhat = np.clip(np.round(yhat), np.min(y), np.max(y)).astype(int)
        return quadratic_weighted_kappa(yhat, y)

train_preds=bst.predict(xdtrain,ntree_limit=bst.best_iteration)
test_preds=bst.predict(xdtest,ntree_limit=bst.best_iteration)
test_preds = np.clip(test_preds, -0.99, 8.99)
train_preds = np.clip(train_preds, -0.99, 8.99)

data = np.vstack((train_preds, train_preds, y_train))
for j in range(8):
        data[1, data[0].astype(int)==j] = data[0, data[0].astype(int)==j] + offsets[j]
for j in range(8):
        train_offset = lambda x: -apply_offset(data, x, j)
        offsets[j] = fmin_powell(train_offset, offsets[j])


from scipy.optimize import fmin_powell
def apply_offset(data, bin_offset, sv, scorer=eval_wrapper):
        # data has the format of pred=0, offset_pred=1, labels=2 in the first dim
        data[1, data[0].astype(int)==sv] = data[0, data[0].astype(int)==sv] + bin_offset
        score = scorer(data[1], data[2])
        return score

for j in range(8):
        train_offset = lambda x: -apply_offset(data, x, j)
        offsets[j] = fmin_powell(train_offset, offsets[j])

k=pd.series(np.array[0]*(len(x_test))

data = np.vstack((test_preds, test_preds, k))
for j in range(8):
        data[1, data[0].astype(int)==j] = data[0, data[0].astype(int)==j] + offsets[j]

resps = np.round(np.clip(data[1], 1, 8)).astype(int)
print (eval_wrapper(resps,y_test))
